{"version":3,"sources":["components/Server.module.css","components/Buttons.module.css","components/User.module.css","components/Sidebar.module.css","components/Group.module.css","components/Flex.module.css","components/PageContainer.module.css","components/Card.module.css","components/Header.module.css","api.js","JsonApi.js","components/PageContainer.js","components/Sidebar.js","components/Buttons.js","components/Flex.js","components/Card.js","components/Header.js","components/User.js","components/Group.js","components/Server.js","views/Home.js","views/Account.js","views/Developer.js","views/Server.js","views/Group.js","views/index.js","App.js","index.js"],"names":["module","exports","OperationsApi","asyncUser","this","logoutAndChangeUser","user","fetchMethod","getUserInfo","sid","playername","reason","postJsonMethod","map","name","time","toString","team","getJsonMethod","groupName","discordId","modRole","adminRole","remid","gid","uid","nickname","alias","game","data","Error","error","isWorking","window","location","constructApiUrl","method","params","paramStr","s","fetch","credentials","result","options","body","JSON","stringify","headers","postMethod","then","json","defaultUser","discord","discriminator","avatar","auth","inGuild","isAdmin","isDeveloper","isOwner","signedIn","response","hasOwnProperty","PageContainer","props","className","styles","children","PageColumn","TopSidebar","to","title","src","Logo","PageLink","activeClassName","PageLinkActive","PageButton","onClick","Sidebar","useQuery","userError","isLoading","devLink","accountLink","logoutLink","groupLinks","history","useHistory","queryClient","useQueryClient","logoutExecutor","useMutation","v","logout","onMutate","a","cancelQueries","prevUser","getQueryData","setQueryData","old","onSettled","variables","context","invalidateQueries","i","mutate","push","permissions","isAdminOf","group","id","Button","style","background_color","width","value","button","disabled","callback","ButtonLink","ButtonRow","buttonRow","TextInput","defaultValue","type","placeholder","onChange","SmallButton","_","vars","content","Switch","useState","checked","checkedSwitch","clickSwitch","switchClassName","SwitchActive","switchTheSwitch","newVal","onKeyPress","e","charCode","role","tabindex","SwitchInner","SwitchOn","SwitchOff","SwitchHandle","DropdownButton","open","setOpen","container","React","useRef","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","ref","dropdown","ul","option","li","Column","Row","Grow","Card","card","CardRow","Header","UserRow","alt","Avatar","DiscordName","DiscordNum","secure","viewBox","fill","xmlns","d","UserStRow","UserRowSt","DiscordId","GroupRow","GroupName","ServerRow","server","SmallText","SettingsRow","SmallIntInput","SmallInput","ServerInfo","ServerInfoColumn","ServerDescriptionColumn","autoBanKick","autoPingKick","discordBotChannel","discordBotLang","discordBotMinPlayerAmount","discordBotPrevReqCount","discordBotStartedAmount","ServerRotation","info","rotationId","setRotationId","ServerDescriptionRow","serverImage","url","GameInfo","ServerName","prefix","serverInfo","rotate","SwitchGame","rotation","index","mapname","PlayerInfo","players","moveTeam","getDropdownOptions","player","giveVip","removeVip","PlayerRow","PlayerName","platoon","PlayerButtons","onMove","ServerInfoHolder","ServerInfoRow","Home","loginButton","openLoginPage","maxWidth","Account","userLine","Developer","getDevGroups","groups","g","Server","playerNicknameTeam","match","getServer","staleTime","serverError","isError","getServerGame","gameError","runningGame","serverCard","playerList","playerInGame","playerName","setPlayerName","status","addVipStatus","changeAddVipStatus","removeVipStatus","changeRemoveVipStatus","unbanStatus","changeUnbanStatus","UnbanPlayer","unbanPlayer","onError","err","newTodo","RemoveVip","AddVip","addVip","movePlayer","previousGroup","find","filter","p","changeRotation","f1","f2","undefined","marginRight","ServerKickPlayer","eaid","setReason","KickPlayer","kickPlayer","ServerBanPlayer","banTime","setBanTime","BanPlayer","banPlayer","ServerAction","action","Group","getGroup","groupError","deleteIcon","removeAdmin","removeGroupAdmin","Date","now","toUTCString","admins","admin","removeServer","servers","removeOwner","removeGroupOwner","owners","groupCard","addOwner","ownerList","adminList","serverList","discordGroupId","discordModRoleId","discordAdminRoleId","owner","AddGroupOwner","AddGroupOwnerExecute","addGroupOwner","UTCNow","addedAt","AddGroupAdmin","canAdd","addAdminState","changeState","AddGroupAdminExecute","addGroupAdmin","updateState","values","newState","AddGroup","roleDisplay","addGroupState","AddNewGroupExecute","addGroup","refetchQueries","checkInputVariables","newVariables","newGroupState","newVars","DeleteGroup","thisGid","DeleteGroupExecute","removeGroup","previousGroups","AddGroupServer","AddGroupServerExecute","addGroupServer","EditGroup","Views","exact","path","component","App","useLocation","TransitionGroup","CSSTransition","classNames","timeout","key","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","client","getElementById"],"mappings":"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","file":"static/js/main.73f083a0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SmallText\":\"Server_SmallText__3uOYG\",\"ServerInfoColumn\":\"Server_ServerInfoColumn__35hJK\",\"ServerInfoRow\":\"Server_ServerInfoRow__2Aa7V\",\"serverImage\":\"Server_serverImage__3m2nE\",\"ServerName\":\"Server_ServerName__2irVE\",\"GameInfo\":\"Server_GameInfo__X3Hhq\",\"ServerDescriptionColumn\":\"Server_ServerDescriptionColumn__3pNJs\",\"ServerDescriptionRow\":\"Server_ServerDescriptionRow__12wsx\",\"SwitchGame\":\"Server_SwitchGame__3MjHo\",\"SettingsRow\":\"Server_SettingsRow__2yzpg\",\"SmallInput\":\"Server_SmallInput__1fZ_Z\",\"PlayerRow\":\"Server_PlayerRow__29Z8B\",\"PlayerName\":\"Server_PlayerName__3tLfO\",\"playerBackgroundInfo\":\"Server_playerBackgroundInfo__27qMt\",\"PlayerButtons\":\"Server_PlayerButtons__3dQvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonRow\":\"Buttons_buttonRow__dKjZj\",\"button\":\"Buttons_button__1VKNK\",\"container\":\"Buttons_container__np2ep\",\"dropdown\":\"Buttons_dropdown__13J8f\",\"ul\":\"Buttons_ul__3tJo8\",\"li\":\"Buttons_li__1sX4Q\",\"TextInput\":\"Buttons_TextInput__35GbL\",\"SmallButton\":\"Buttons_SmallButton__3rzhd\",\"Switch\":\"Buttons_Switch__39fTc\",\"SwitchActive\":\"Buttons_SwitchActive__2ViHx\",\"SwitchInner\":\"Buttons_SwitchInner__3LnS9\",\"SwitchHandle\":\"Buttons_SwitchHandle__2b8wJ\",\"SwitchOff\":\"Buttons_SwitchOff__3Oaf-\",\"SwitchOn\":\"Buttons_SwitchOn__1_Jsb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserRow\":\"User_UserRow__1fzJH\",\"Avatar\":\"User_Avatar__3XgeX\",\"DiscordName\":\"User_DiscordName__j-kJJ\",\"DiscordNum\":\"User_DiscordNum__odqe3\",\"secure\":\"User_secure__ADMpb\",\"UserRowSt\":\"User_UserRowSt__D7e-x\",\"DiscordId\":\"User_DiscordId__CJ0BY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PageLink\":\"Sidebar_PageLink__3fxKj\",\"PageButton\":\"Sidebar_PageButton__3ug-M\",\"PageLinkActive\":\"Sidebar_PageLinkActive___nnPr\",\"Sidebar\":\"Sidebar_Sidebar__c0TTh\",\"Logo\":\"Sidebar_Logo__2HFo5\",\"TopSidebar\":\"Sidebar_TopSidebar__BQCyG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GroupRow\":\"Group_GroupRow__1Ew1c\",\"GroupName\":\"Group_GroupName__3G6eX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Column\":\"Flex_Column__3cQ9_\",\"Row\":\"Flex_Row__3SC-0\",\"Grow\":\"Flex_Grow__f7am0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PageContainer\":\"PageContainer_PageContainer__1PlzU\",\"PageColumn\":\"PageContainer_PageColumn__3Qegy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3F8np\",\"CardRow\":\"Card_CardRow__1NbF3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__3VoE2\"};","import JsonClient from \"./JsonApi\";\n\nexport class ApiProvider extends JsonClient {\n\n    constructor() {\n        super();\n    }\n\n    logout() {\n        var asyncUser = this.logoutAndChangeUser();\n        this.user = asyncUser;\n    }\n\n    async logoutAndChangeUser() {\n        await this.fetchMethod(\"logout/\");\n        var user = await this.getUserInfo();\n        return user;\n    }\n\n    async kickPlayer({ sid, playername, reason }) {\n        return await this.postJsonMethod(\"changeplayer\", {\n            \"request\": \"kickPlayer\",\n            \"playername\": playername,\n            \"serverid\": sid,\n            \"reason\": reason\n        });\n    }\n\n    async changeRotation({ sid, map }) {\n        return await this.postJsonMethod(\"changelevel\", {\n            \"mapnumber\": map,\n            \"serverid\": sid\n        });\n    }\n\n    async banPlayer({ name, reason, time, sid }) {\n        return await this.postJsonMethod(\"changeserver\", {\n            \"request\": \"addServerBan\",\n            \"playername\": name,\n            \"serverid\": sid,\n            \"bantime\": time.toString(),\n            \"reason\": reason\n        }); \n    }\n\n    async unbanPlayer({ name, reason, sid }) {\n        return await this.postJsonMethod(\"changeserver\", {\n            \"request\": \"removeServerBan\",\n            \"playername\": name,\n            \"serverid\": sid,\n            \"reason\": reason\n        });\n    }\n\n    async addVip({ sid, name, reason }) {\n        return await this.postJsonMethod(\"changeserver\", {\n            \"request\": \"addServerVip\",\n            \"playername\": name,\n            \"serverid\": sid,\n            reason\n        });\n    }\n\n    async removeVip({ sid, name, reason }) {\n        return await this.postJsonMethod(\"changeserver\", {\n            \"request\": \"removeServerVip\",\n            \"playername\": name,\n            \"serverid\": sid,\n            reason\n        });\n    }\n\n    async movePlayer({ sid, team, name }) {\n        return await this.postJsonMethod(\"moveplayer\", {\n            \"teamid\": team,\n            \"playername\": name,\n            \"serverid\": sid\n        });\n    }\n\n    async getBanList( sid ) {\n        return await this.getJsonMethod(\"infolist\", {\n            \"type\": \"bannedList\",\n            \"serverid\": sid\n        });\n    }\n\n    async getLogs() {\n        return await this.getJsonMethod(\"taillog\");\n    }\n\n    async getDevGroups() {\n        return await this.getJsonMethod(\"devgroups\");\n    }\n\n    async addGroup({ groupName, discordId, modRole, adminRole, sid, remid }) {\n        return await this.postJsonMethod(\"addgroup\", {\n            \"groupname\": groupName,\n            \"adminroleid\": adminRole,\n            \"discordid\": discordId,\n            \"modroleid\": modRole,\n            \"remid\": remid,\n            \"sid\": sid,\n        });\n    }\n\n    async removeGroup({ gid }) {\n        return await this.postJsonMethod(\"delgroup\", {\n            \"groupId\": gid,\n        });\n    }\n\n    async getGroup(gid) {\n        return await this.getJsonMethod(\"groups\", { \"groupid\": gid });\n    }\n\n    async addGroupOwner({ gid, uid, nickname }) {\n        return await this.postJsonMethod(\"addowner\", {\n            \"userid\": uid, // discord userid\n            \"nickname\": nickname, // will change when the user signs in\n            \"groupid\": gid,\n        });\n    }\n\n    async addGroupServer({ gid, name, alias }) {\n        return await this.postJsonMethod(\"addserver\", {\n            \"servername\": name,\n            \"serveralias\": alias,\n            \"groupid\": gid,\n        });\n    }\n\n    async addGroupAdmin({ gid, uid, nickname }) {\n        return await this.postJsonMethod(\"addadmin\", {\n            \"userid\": uid, // discord userid\n            \"nickname\": nickname, // will change when the user signs in\n            \"groupid\": gid,\n        });\n    }\n\n    async removeGroupAdmin({ gid, uid }) {\n        return await this.postJsonMethod(\"deladmin\", {\n            \"userid\": uid,\n            \"groupid\": gid,\n        });\n    }\n\n    async removeGroupOwner({ gid, uid }) {\n        return await this.postJsonMethod(\"delowner\", {\n            \"userid\": uid,\n            \"groupid\": gid,\n        });\n    }\n\n    async getServer(sid) {\n        return await this.getJsonMethod(\"server\", { \"serverid\": sid });\n    }\n\n    async getServerGame(sid) {\n        var game = await this.getJsonMethod(\"servers\", { \"serverid\": sid });\n        if (\"error\" in game.data[0]) {\n            throw Error(game.data[0].error);\n        } else {\n            return game;\n        }\n    }\n\n    async removeServer({ gid, sid }) {\n        return await this.postJsonMethod(\"delserver\", {\n            \"serverid\": sid,\n            \"groupid\": gid,\n        });\n    }\n\n    async renameServer({ name, sid }) {\n        return await this.postJsonMethod(\"renameserver\", {\n            \"serverid\": sid,\n            \"servername\": name,\n        });\n    }\n\n    async changeServerAlias({ gid, alias, sid }) {\n        return await this.postJsonMethod(\"serveralias\", {\n            \"serverid\": sid,\n            \"groupid\": gid,\n            \"serveralias\": alias,\n        });\n    }\n\n\n}\n\nexport const OperationsApi = new ApiProvider();","\nexport default class JsonClient {\n  constructor() {\n    this.isWorking = true;\n    this.user = this.getUserInfo();\n  }\n  openLoginPage() {\n    window.location = this.constructApiUrl(\"login\");\n  }\n    constructApiUrl(method, params) {\n        params = params || {};\n        let paramStr = \"\";\n        for (let s in params) {\n            paramStr += s + \"=\" + params[s] + \"&\";\n        }\n        if (paramStr !== \"\") paramStr = \"?\" + paramStr;\n        const apiEP = \"https://manager-api.gametools.network/api/\";\n        return apiEP + method + paramStr;\n    }\n    async fetchMethod(method, params) {\n        let result = await fetch(this.constructApiUrl(method, params), {\n            credentials: \"include\"\n        });\n        return result;\n    }\n    async postMethod(method, params) {\n        let result = await fetch(this.constructApiUrl(method, {}), params);\n        return result;\n    }\n  async postJsonMethod(method, params) {\n    const options = {\n      method: 'POST',\n      body: JSON.stringify(params),\n      credentials: \"include\",\n      headers: {\n          'Content-Type': 'application/json'\n      }\n    };\n    return await this.postMethod(method, options).then(result => {\n      return result.json().then(json => json, error => ({ \"error\": error }));\n    }, error => ({ \"error\": error }));\n  }\n  getJsonMethod(method, params) {\n    return this.fetchMethod(method, params).then(result => {\n      return result.json().then(json => json, error => ({ \"error\": error }));\n    }, error => ({ \"error\": error }));\n  }\n  async getUserInfo() {\n    const defaultUser = {\n      discord: {\n        name: \"\",\n        discriminator: 0,\n        avatar: \"\"\n      },\n      auth: {\n          inGuild: false,\n          isAdmin: false,\n          isDeveloper: false,\n          isOwner: false,\n          signedIn: false\n      }\n    };\n    let response = await this.getJsonMethod(\"getinfo\");\n    if (!response.hasOwnProperty(\"error\")) {\n      return response;\n    }\n    return defaultUser;\n  }\n}\n","import React, { useState } from \"react\";\nimport styles from \"./PageContainer.module.css\";\n\n\nexport function PageContainer(props) {\n    return (\n        <div className={styles.PageContainer}>\n            {props.children}\n        </div>\n    );\n\n}\n\nexport function PageColumn(props) {\n    return (\n        <div className={styles.PageColumn}>\n            {props.children}\n        </div>\n    );\n}\n","import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\nimport { NavLink, Link, useHistory } from 'react-router-dom';\n\nimport styles from \"./Sidebar.module.css\";\n\nimport { OperationsApi } from \"../api\";\n\nfunction TopSidebar() {\n    return (\n        <div className={styles.TopSidebar}>\n            <Link to=\"/\" title=\"Main page\">\n                <img src=\"/Comnet-logo.png\" className={styles.Logo} />\n            </Link>\n        </div>\n    );\n}\n\nfunction PageLink(props) {\n    return (\n        <div className={styles.PageLink}>\n            <NavLink to={props.to} activeClassName={styles.PageLinkActive} title={props.name}>{props.name}</NavLink>\n        </div>\n    );\n}\n\nfunction PageButton(props) {\n    return (\n        <div className={styles.PageButton}>\n            <span onClick={props.onClick}>{props.name}</span>\n        </div>\n    );\n}\n\nexport function Sidebar(props) {\n\n    const { error: userError, data: user, isLoading } = useQuery('user', () => OperationsApi.user);\n\n    var devLink = \"\", accountLink = \"\", logoutLink = \"\", groupLinks = \"\";\n\n    var history = useHistory();\n    const queryClient = useQueryClient();\n\n    const logoutExecutor = useMutation(\n        v => OperationsApi.logout(),\n        {\n            // When mutate is called:\n            onMutate: async (v) => {\n                // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n                await queryClient.cancelQueries('user');\n                // Snapshot the previous value\n                const prevUser = queryClient.getQueryData('user');\n                // Optimistically update to the new value\n                queryClient.setQueryData('user', old => {\n                    return {\n                        discord: {\n                            name: \"\",\n                            discriminator: 0,\n                            avatar: \"\"\n                        },\n                        auth: {\n                            inGuild: false,\n                            isAdmin: false,\n                            isDeveloper: false,\n                            isOwner: false,\n                            signedIn: false\n                        }\n                    };\n                })\n                // Return a context object with the snapshotted value\n                return { prevUser }\n            },\n            // Always refetch after error or success:\n            onSettled: (data, error, variables, context) => {\n                queryClient.invalidateQueries('user')\n            },\n        }\n    );\n\n\n    if (!userError && !isLoading && user) {\n        if (user.auth.signedIn) {\n            if (user.auth.isDeveloper) {\n                devLink = <PageLink to=\"/dev/\" name=\"Developer Options\" />;\n            }\n            accountLink = <PageLink to=\"/account/\" name=\"Account\" />;\n            logoutLink = <PageButton onClick={() => { logoutExecutor.mutate({}); history.push('/'); }} name=\"Logout\" />;\n            groupLinks = [];\n            for (let i in user.permissions.isAdminOf) {\n                let group = user.permissions.isAdminOf[i];\n                groupLinks.push(<PageLink to={ \"/group/\" + group.id } name={group.groupName} key={i} />);\n            }\n\n        }\n    }\n\n    \n\n    return (\n        <div className={styles.Sidebar}>\n            <TopSidebar />\n            <div>\n                {accountLink}\n                {devLink}\n                {groupLinks}\n                <PageButton onClick={() => { window.location = \"https://discord.gametools.network/\" }} name=\"Need help?\" />\n                {logoutLink}\n            </div>\n        </div>\n    );\n\n}","import React, { useState, useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport styles from \"./Buttons.module.css\";\n\n\nexport function Button(props) {\n    var style = {};\n    if (props.background_color) {\n        style[\"background\"] = props.background_color\n    }\n    if (props.width) {\n        style[\"width\"] = props.width;\n    }\n    return (\n        <button value={props.value} className={styles.button} disabled={props.disabled} onClick={props.callback} title={props.name} style={style}>{props.name}</button>\n    );\n}\n\nexport function ButtonLink(props) {\n    if (props.disabled) {\n        return <Button name={props.name} disabled={true} />\n    }\n    return (\n        <NavLink className={styles.button} to={props.to} title={props.name}>{props.name}</NavLink>\n    );\n}\n\nexport function ButtonRow(props) {\n    return (\n        <div className={styles.buttonRow}>{props.children}</div>\n    );\n}\n\n\nexport function TextInput(props) {\n/*    var callback = props.callback, elementClassName = styles.TextInput;\n    if (props.disabled) {\n        callback = null;\n        elementClassName = styles.TextInputDis;\n    }*/\n    return (\n        <input defaultValue={props.defaultValue} className={styles.TextInput} disabled={props.disabled} style={props.style} type={props.type || \"text\"} placeholder={props.name} onChange={props.callback} />\n    );\n}\n\nexport function SmallButton(props) {\n    return (\n        <div className={styles.SmallButton} onClick={_ => props.callback(props.vars)} title={props.name}>{props.content || props.name}</div>\n    );\n}\n\nexport function Switch(props) {\n\n    const [checkedSwitch, clickSwitch] = useState(props.checked || false);\n    const switchClassName = checkedSwitch ? styles.Switch : styles.SwitchActive;\n\n    const switchTheSwitch = () => {\n        var newVal = !checkedSwitch;\n        clickSwitch(newVal);\n        if (props.callback) props.callback(newVal);\n    };\n\n    /*  If user uses tabs, make it clickable on Enter key */\n    const SwitchOnenter = (e) => {\n        if (e.charCode === 13) switchTheSwitch();\n    };\n\n    return (\n        <div className={switchClassName} onClick={switchTheSwitch} onKeyPress={SwitchOnenter} role=\"switch\" tabindex=\"1\">\n            <span className={styles.SwitchInner}>\n                <span className={styles.SwitchOn}></span>\n                <span className={styles.SwitchOff}></span>\n            </span>\n            <span className={styles.SwitchHandle}></span>\n        </div>\n    );\n}\n\nexport function DropdownButton(props) {\n    const [open, setOpen] = useState(false);\n\n    let container = React.useRef();\n\n    useEffect(() => {\n        let handleClickOutside = (event) => {\n            if (container.current && !container.current.contains(event.target)) {\n                setOpen(false)\n            }\n        };\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return function cleanup() {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        }\n    })\n\n    return (\n        <div className={styles.container} ref={container}>\n            <button type=\"button\" className={styles.button} onClick={() => setOpen(!open)}>{props.name}</button>\n            {open && (<div className={styles.dropdown}>\n                <ul className={styles.ul}>\n                    {\n                        props.options.map(option => <li className={styles.li} onClick={option.callback}>{option.name}</li>)\n                    }\n                </ul>\n            </div>)}\n        </div>\n    );\n}\n","import React from \"react\";\n\nimport styles from \"./Flex.module.css\";\n\n\nexport function Column(props) {\n    return (\n        <div className={styles.Column}>{props.children}</div>\n    );\n}\n\nexport function Row(props) {\n    return (\n        <div className={styles.Row}>{props.children}</div>\n    );\n}\n\nexport function Grow(props) {\n    return (\n        <div className={styles.Grow}>{props.children}</div>\n    );\n}","import React from \"react\";\nimport styles from \"./Card.module.css\";\n\nexport function Card(props) {\n    return (\n        <div className={styles.card} style={props.style}>\n            {props.children}\n        </div>\n    );\n}\n\nexport function CardRow(props) {\n    return <span className={styles.CardRow}>{props.children}</span>;\n}","import React from \"react\";\nimport styles from \"./Header.module.css\";\n\n\nexport function Header(props) {\n    return (\n        <div className={styles.Header}>\n            {props.children}\n        </div>\n    );\n}","import React from \"react\";\nimport styles from \"./User.module.css\";\n\nexport function UserRow(props) {\n    var user = props.discord;\n    return (\n        <div className={styles.UserRow}>\n            <img alt=\"\" src={user.avatar} className={styles.Avatar} />\n            <div className={styles.DiscordName}>\n                {user.name}\n                <span className={styles.DiscordNum}>\n                    {user.discriminator}\n                </span>\n            </div>\n            <div className={styles.secure}>\n                <svg viewBox=\"0 0 12 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M6 12C6.39782 12 6.77935 11.842 7.06066 11.5607C7.34196 11.2794 7.5 10.8978 7.5 10.5C7.5 9.6675 6.825 9 6 9C5.60217 9 5.22064 9.15804 4.93934 9.43934C4.65804 9.72065 4.5 10.1022 4.5 10.5C4.5 10.8978 4.65804 11.2794 4.93934 11.5607C5.22064 11.842 5.60217 12 6 12ZM10.5 5.25C10.8978 5.25 11.2794 5.40804 11.5607 5.68934C11.842 5.97065 12 6.35218 12 6.75V14.25C12 14.6478 11.842 15.0294 11.5607 15.3107C11.2794 15.592 10.8978 15.75 10.5 15.75H1.5C1.10218 15.75 0.720644 15.592 0.43934 15.3107C0.158035 15.0294 0 14.6478 0 14.25V6.75C0 5.9175 0.675 5.25 1.5 5.25H2.25V3.75C2.25 2.75544 2.64509 1.80161 3.34835 1.09835C4.05161 0.395088 5.00544 0 6 0C6.49246 0 6.98009 0.0969967 7.43506 0.285452C7.89003 0.473907 8.30343 0.75013 8.65165 1.09835C8.99987 1.44657 9.27609 1.85997 9.46455 2.31494C9.653 2.76991 9.75 3.25754 9.75 3.75V5.25H10.5ZM6 1.5C5.40326 1.5 4.83097 1.73705 4.40901 2.15901C3.98705 2.58097 3.75 3.15326 3.75 3.75V5.25H8.25V3.75C8.25 3.15326 8.01295 2.58097 7.59099 2.15901C7.16903 1.73705 6.59674 1.5 6 1.5Z\" fill=\"#55F165\" />\n                </svg>\n                Logged in\n            </div>\n        </div>\n    );\n}\n\nexport function UserStRow(props) {\n    var user = props.user;\n    return (\n        <div className={styles.UserRowSt}>\n            <div className={styles.DiscordName}>\n                {user.name}\n            </div>\n            <div className={styles.DiscordId}>\n                {user.id}\n            </div>\n            {props.button}\n        </div>\n    );\n}\n","import React from \"react\";\nimport styles from \"./Group.module.css\";\nimport { Link } from \"react-router-dom\";\n\nexport function GroupRow(props) {\n    var group = props.group;\n    return (\n        <Link className={styles.GroupRow} to={\"/group/\" + group.id}>\n            <span className={styles.GroupName}>{group.groupName}</span>\n            Manage group\n        </Link>\n    );\n}\n\nexport function ServerRow(props) {\n    var server = props.server;\n\n    // If not yet setteled\n    if (server.id === null) {\n        return (\n            <div className={styles.GroupRow}>\n                <span className={styles.GroupName}>{server.name}</span>\n                {props.button}\n            </div>\n        );\n    }\n\n    return (\n        <div className={styles.GroupRow}>\n            <Link className={styles.GroupName} to={\"/server/\" + server.id}>{server.name}</Link>\n            {props.button}\n        </div>\n    );\n}","import React, { useState } from \"react\";\nimport styles from \"./Server.module.css\";\nimport { Link } from \"react-router-dom\";\nimport { Button, ButtonRow, Switch, DropdownButton, ButtonLink } from \"./Buttons\";\n\n\nexport function SmallText(props) {\n    return (<span className={styles.SmallText}>{props.children}</span>);\n}\n\nexport function EditableText(props) {\n    return (<p>{props.children}</p>);\n}\n\nexport function SettingsRow(props) {\n    return <div className={styles.SettingsRow}>{props.children}</div>;\n}\n\nexport function SmallIntInput(props) {\n    return <input type=\"text\" className={styles.SmallInput} defaultValue={props.value} />;\n}\n\nexport function ServerInfo(props) {\n    var server = props.server;\n    return (\n        <>\n            <div className={styles.ServerInfoColumn}>\n                <SettingsRow>\n                    <SmallText>Auto kick/ban</SmallText>\n                </SettingsRow>\n                <SettingsRow>\n                    <SmallText>Kick on ping</SmallText>\n                </SettingsRow>\n                <SettingsRow>\n                    <SmallText>Discord bot channel</SmallText>\n                </SettingsRow>\n                <SettingsRow>\n                    <SmallText>Bot lang</SmallText> \n                </SettingsRow>\n            </div>\n            <div className={styles.ServerDescriptionColumn}>\n                <SettingsRow>\n                    <Switch checked={server.autoBanKick} callback={() => { }} />\n                </SettingsRow>\n                <SettingsRow>\n                    <SmallIntInput value={server.autoPingKick} />\n                </SettingsRow>\n                <SettingsRow>\n                    <SmallIntInput value={server.discordBotChannel} />\n                </SettingsRow>\n                <SettingsRow>\n                    <SmallIntInput value={server.discordBotLang} />\n                </SettingsRow>\n            </div>\n            <div className={styles.ServerDescriptionColumn}>\n                <SettingsRow>\n                    <SmallText>Bot Min players</SmallText>\n                </SettingsRow>\n                <SettingsRow>\n                    <SmallText>Bot Prev Req Count</SmallText>\n                </SettingsRow>\n                <SettingsRow>\n                    <SmallText>Bot Started Amount</SmallText>\n                </SettingsRow>\n            </div>\n            <div className={styles.ServerDescriptionColumn}>\n                <SettingsRow>\n                    <SmallIntInput value={server.discordBotMinPlayerAmount} />\n                </SettingsRow>\n                <SettingsRow>\n                    <SmallIntInput value={server.discordBotPrevReqCount} />\n                </SettingsRow>\n                <SettingsRow>\n                    <SmallIntInput value={server.discordBotStartedAmount} />\n                </SettingsRow>\n            </div>\n        </>\n    );\n}\n\nexport function ServerRotation(props) {\n    var game = props.game.data[0].info;\n    var [rotationId, setRotationId] = useState(\"\");\n    return (\n        <div className={styles.ServerInfoColumn}>\n            <div className={styles.ServerDescriptionRow}>\n                <img className={styles.serverImage} src={game.url} />\n                <div className={styles.GameInfo}>\n                    <span className={styles.ServerName}>{game.prefix}</span>\n                    <SmallText>{`${game.serverInfo} players`}</SmallText>\n                    <SmallText>{\"Running now\"}</SmallText>\n                </div>\n            </div>\n            <ButtonRow>\n                <Button name=\"Restart\" callback={_ => props.rotate(game.rotationId)} />\n                <select className={styles.SwitchGame} value={rotationId} onChange={e => setRotationId(e.target.value)}>\n                    <option value=\"\">Switch game..</option>\n                    {game.rotation.map(value => \n                        <option value={value.index}>{value.mapname}</option>\n                    )}\n                </select>\n                {(rotationId !== \"\") ? <Button name=\"Apply\" callback={_ => { props.rotate(rotationId); setRotationId(\"\"); }} /> : \"\"}\n            </ButtonRow>\n        </div>\n    );\n}\n\nexport function PlayerInfo(props) {\n\n    var info = props.game.data[0].players[props.team].players;\n\n    var moveTeam = (props.team == \"0\") ? \"1\" : \"2\";\n\n    let getDropdownOptions = (player) => {\n        return [\n            { name: \"Give VIP\", callback: () => props.giveVip.mutate({ sid: props.sid, name: player.name, reason: \"\" }) },\n            { name: \"Remove VIP\", callback: () => props.removeVip.mutate({ sid: props.sid, name: player.name, reason: \"\" }) },\n        ]\n    };\n    return (\n        info.map(player => \n            <div className={styles.PlayerRow}>\n                <span className={styles.PlayerName}>\n                    {player.platoon !== \"\" ? `[${player.platoon}] ` : \"\"}\n                    {player.name}\n                </span>\n                <div className={styles.PlayerButtons}>\n                    {/*<Button name=\"Stats\"></Button>*/}\n                    <Button name=\"Move\" callback={_ => props.onMove.mutate({ sid: props.sid, name: player.name, team: moveTeam})} />\n                    <ButtonLink name=\"Kick\" to={`/server/${props.sid}/kick/${player.name}/`} />\n                    <ButtonLink name=\"Ban\" to={`/server/${props.sid}/ban/${player.name}/`} />\n                    <DropdownButton options={getDropdownOptions(player)} name=\"☰\"></DropdownButton>\n                </div>\n            </div>\n        )\n    );\n}\n\nexport function ServerInfoHolder(props) {\n    return (\n        <div className={styles.ServerInfoRow}>\n            {props.children}\n        </div>\n    );\n}\n\n","import React, { useState } from \"react\";\nimport { useQuery } from 'react-query';\nimport { Redirect } from 'react-router-dom';\nimport { OperationsApi } from \"../api\";\nimport { Column, Card, Header, Button, ButtonRow, Row } from \"../components\";\n\n\nexport default function Home() {\n\n    const { error: userError, data: user, isLoading } = useQuery('user', () => OperationsApi.user);\n    var loginButton = <Button name=\"Loading..\" />;\n\n    if ((!isLoading && !userError && user && !user.auth.signedIn) || (userError && !isLoading)) {\n        loginButton = <Button name=\"Login with Discord\" callback={() => { OperationsApi.openLoginPage() }} />;\n    } else if (!isLoading && !userError && user && user.auth.signedIn) {\n        return <Redirect to=\"/account/\" />\n    }\n\n    return (\n        <Row>\n            <Column>\n                <Header>\n                    <h2>Server Panel</h2>\n                </Header>\n                <Card style={{ maxWidth: '800px' }}>\n                    <h2>Introducing new tools</h2>\n                    <p>Community Network developed server panel to controll Battlefield 1 servers with our internal APIs. With server panel you can manage your servers and setup Discord integration. Instantly add and remove server admins, via the server panel or discord roles. Your admins can ban, kick, move players, add VIPs, revoke bans, watch ban list with more details, download ban and vip lists. As an owner you can access logs and see every action that was made via server panel. We integrating our tools tightly, providing Discord commands to administrate your servers.</p>\n                    <p>Contact us to get unlimited free access!</p>\n                    <ButtonRow>{loginButton}</ButtonRow>\n                </Card>\n            </Column>\n        </Row>\n    );\n\n}","import React, { useState } from \"react\";\nimport { useQuery } from 'react-query';\nimport { Redirect } from 'react-router-dom';\nimport { OperationsApi } from \"../api\";\nimport { Column, Card, Header, Button, CardRow, UserRow, Row } from \"../components\";\n\n\nexport default function Account() {\n\n    const { error: userError, data: user, isLoading } = useQuery('user', () => OperationsApi.user);\n    var userLine = \"\";\n\n    if (!userError && !isLoading && user) {\n        if (!user.auth.signedIn) {\n            return <Redirect to=\"/\" />;\n        } else {\n            userLine = <UserRow discord={user.discord} />;\n        }\n    } else if (userError && !isLoading) {\n        return <Redirect to=\"/\" />;\n    }\n\n    return (\n        <Row>\n            <Column>\n                <Header>\n                    <h2>Account</h2>\n                </Header>\n                <Card>\n                    <h2>Discord Profile</h2>\n                    {userLine}\n                </Card>\n            </Column>\n            <Column>\n                <Header />\n                <Card>\n                    <h2>Permissions</h2>\n                    <CardRow>Administrator</CardRow>\n                    <CardRow>Server owner</CardRow>\n                    <CardRow>System administrator</CardRow>\n                </Card>\n            </Column>\n        </Row>\n    );\n\n}","import React, { useState } from \"react\";\nimport { useQuery } from 'react-query';\nimport { Redirect } from 'react-router-dom';\nimport { OperationsApi } from \"../api\";\nimport { Column, Card, Header, ButtonLink, ButtonRow, GroupRow, Row } from \"../components\";\n\n\nexport function Developer() {\n\n    const { isLoading, error, data } = useQuery('devGroups', () => OperationsApi.getDevGroups())\n    \n    var groups = [];\n\n    if (!isLoading && !error && data) {\n        data.data.map((g, i) => {\n            groups.push(<GroupRow key={i} group={g} />);\n        });\n    } else if (error) {\n        return <Redirect to=\"/\" />;\n    }\n\n    return (\n        <Row>\n            <Column>\n                <Header>\n                    <h2>Developer Options</h2>\n                </Header>\n                <Card>\n                    <h2>List of Groups</h2>\n                    {groups}\n                    <ButtonRow>\n                        <ButtonLink name=\"Add new Group\" to=\"/group/new/\" />\n                    </ButtonRow>\n                </Card>\n            </Column>\n            <Column>\n\n            </Column>\n        </Row>\n    );\n\n}","import React, { useState, useRef } from \"react\";\nimport { useQuery, useQueryClient, useMutation } from 'react-query';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { OperationsApi } from \"../api\";\nimport { Column, Card, Header, ServerRotation, ServerInfoHolder, ButtonLink, ButtonRow, Button, UserStRow, Row, ServerRow, Grow, TextInput, SmallButton, ServerInfo, PlayerInfo } from \"../components\";\n\n\nexport function Server(props) {\n    var sid = props.match.params.sid;\n\n    const queryClient = useQueryClient();\n\n    const { isError: serverError, data: server } = useQuery('server' + sid, () => OperationsApi.getServer(sid), { staleTime: 60000 });\n    const { isError: gameError, data: runningGame } = useQuery('serverGame' + sid, () => OperationsApi.getServerGame(sid), { staleTime: 60000 });\n\n    var serverCard = \"\";\n    var playerList = \"\";\n    var playerInGame = false;\n    var playerNicknameTeam;\n\n    var [playerName, setPlayerName] = useState(\"\");\n\n    var [addVipStatus, changeAddVipStatus] = useState({ name: \"Add Vip\", status: false });\n    var [removeVipStatus, changeRemoveVipStatus] = useState({ name: \"Remove Vip\", status: false });\n    var [unbanStatus, changeUnbanStatus] = useState({ name: \"Unban\", status: false });\n\n\n    const UnbanPlayer = useMutation(\n        v => OperationsApi.unbanPlayer(v), {\n            onMutate: async () => {\n                changeUnbanStatus({ name: \"Pending..\", status: true });\n                return { status: unbanStatus }\n            },\n            // If the mutation fails, use the context returned from onMutate to roll back\n            onError: (err, newTodo, context) => {\n\n            },\n            // Always refetch after error or success:\n            onSettled: (data, error, variables, context) => {\n                changeUnbanStatus(context.status);\n            },\n        }\n    );\n\n    const RemoveVip = useMutation(\n        v => OperationsApi.removeVip(v), {\n            onMutate: async () => {\n                changeRemoveVipStatus({ name: \"Pending..\", status: true });\n                return { status: removeVipStatus }\n            },\n            // If the mutation fails, use the context returned from onMutate to roll back\n            onError: (err, newTodo, context) => {\n\n            },\n            // Always refetch after error or success:\n            onSettled: (data, error, variables, context) => {\n                changeRemoveVipStatus(context.status);\n            },\n        }\n    );\n\n    const AddVip = useMutation(\n        v => OperationsApi.addVip(v), {\n            onMutate: async () => {\n                changeAddVipStatus({ name: \"Pending..\", status: true });\n                return { status: addVipStatus }\n            },\n            // If the mutation fails, use the context returned from onMutate to roll back\n            onError: (err, newTodo, context) => {\n                \n            },\n            // Always refetch after error or success:\n            onSettled: (data, error, variables, context) => {\n                changeAddVipStatus(context.status);\n            },\n        }\n    );\n\n    const movePlayer = useMutation(\n        variables => OperationsApi.movePlayer(variables),\n        {\n            // When mutate is called:\n            onMutate: async ({ sid, team, name }) => {\n                // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n                await queryClient.cancelQueries('serverGame' + sid)\n                // Snapshot the previous value\n                const previousGroup = queryClient.getQueryData('serverGame' + sid)\n                // Optimistically update to the new value\n                queryClient.setQueryData('serverGame' + sid, old => {\n                    if (team == \"1\") {\n                        old.data[0].players[1].players.push(old.data[0].players[0].players.find(e => e.name === name));\n                        old.data[0].players[0].players = old.data[0].players[0].players.filter(p => p.name !== name);\n                    } else {\n                        old.data[0].players[0].players.push(old.data[0].players[1].players.find(e => e.name === name));\n                        old.data[0].players[1].players = old.data[0].players[1].players.filter(p => p.name !== name);\n                    }\n                    return old;\n                })\n                // Return a context object with the snapshotted value\n                return { previousGroup, sid }\n            },\n            // If the mutation fails, use the context returned from onMutate to roll back\n            onError: (err, newTodo, context) => {\n                queryClient.setQueryData('serverGame' + context.sid, context.previousGroup)\n            },\n            // Always refetch after error or success:\n            onSettled: (data, error, variables, context) => {\n                //queryClient.invalidateQueries('groupId' + context.gid)\n            },\n        }\n    );\n\n    if (!serverError && server && !gameError && runningGame) {\n        serverCard = (\n            <Row>\n                <Column>\n                    <Header>\n                        <h2>Dashboard</h2>\n                    </Header>\n                    <Card>\n                        <h2>Server info</h2>\n                        <p>Server info</p>\n                        <ServerInfoHolder>\n                            <ServerRotation game={runningGame} rotate={id => OperationsApi.changeRotation({ sid, map: id })} /> \n                        </ServerInfoHolder>\n                    </Card>\n                </Column>\n                <Column>\n                    <Header />\n                    <Card>\n                        <h2>Discord Integration</h2>\n                        <p>Servers can be attached to Discord bots. <br /> Main bot settings for current server.</p>\n                        <ServerInfoHolder>\n                            <ServerInfo server={server} />\n                        </ServerInfoHolder>\n                    </Card>\n                </Column>\n            </Row>\n        );\n    }\n\n    if (!gameError && runningGame) {\n        var f1 = runningGame.data[0].players[0].players.find(e => e.name == playerName);\n        var f2 = runningGame.data[0].players[1].players.find(e => e.name == playerName);\n\n        if (f1 !== undefined) {\n            playerNicknameTeam = \"1\";\n        } else if(f2 !== undefined) {\n            playerNicknameTeam = \"2\";\n        }\n\n        var playerInGame = (playerName !== \"\") &&\n            (\n                (f1 !== undefined) || (f2 !== undefined)\n            );\n\n        playerList = (\n            <Row>\n                <Column>\n                    <Card>\n                        <h2>Team 1</h2>\n                        <PlayerInfo game={runningGame} team=\"0\" sid={sid} onMove={movePlayer} giveVip={AddVip} removeVip={RemoveVip} /> \n                    </Card>\n                </Column>\n                <Column>\n                    <Card>\n                        <h2>Team 2</h2>\n                        <PlayerInfo game={runningGame} team=\"1\" sid={sid} onMove={movePlayer} giveVip={AddVip} removeVip={RemoveVip} /> \n                    </Card>\n                </Column>\n            </Row>\n        )\n    }\n\n    return (\n        <>\n            {serverCard}\n            <Row>\n                <Column>\n                    <Card>\n                        <h2>Console</h2>\n                        <Row>\n                            <TextInput name=\"Player name\" callback={e => setPlayerName(e.target.value)} style={{\n                                marginRight: 12,\n                            }}/>\n                            <ButtonRow>\n                                <ButtonLink disabled={playerName === \"\"} name=\"Kick\" to={`/server/${sid}/kick/${playerName}/`} />\n                                <Button disabled={!playerInGame} name=\"Move\" callback={_ => movePlayer.mutate({ sid, team: playerNicknameTeam, name: playerName })} />\n                                <ButtonLink disabled={playerName === \"\"} name=\"Ban\" to={`/server/${sid}/ban/${playerName}/`} />\n                                <Button disabled={playerName === \"\" || unbanStatus.status} name={unbanStatus.name} callback={_ => UnbanPlayer.mutate({ sid, name: playerName, reason: \"\" })} />\n                                <Button disabled={playerName === \"\" || addVipStatus.status } name={addVipStatus.name} callback={_ => AddVip.mutate({ sid, name: playerName, reason: \"\" })}  />\n                                <Button disabled={playerName === \"\" || removeVipStatus.status} name={removeVipStatus.name} callback={_ => RemoveVip.mutate({ sid, name: playerName, reason: \"\" })}  />\n                            </ButtonRow>\n                        </Row>\n                    </Card>\n                </Column>\n            </Row>\n            {playerList}\n        </>\n    );\n\n}\n\n\nfunction ServerKickPlayer(props) {\n\n    var { sid, eaid } = props;\n\n    var [reason, setReason] = useState(\"\");\n    const queryClient = useQueryClient();\n\n    const KickPlayer = useMutation(\n        v => OperationsApi.kickPlayer(v),\n        {\n            // When mutate is called:\n            onMutate: async ({ sid, eaid, reason }) => {\n                // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n                await queryClient.cancelQueries('serverGame' + sid)\n                // Snapshot the previous value\n                const previousGroup = queryClient.getQueryData('serverGame' + sid)\n                // Optimistically update to the new value\n                queryClient.setQueryData('serverGame' + sid, old => {\n                    old.data[0].players[0].players = old.data[0].players[0].players.filter(e => e.name !== eaid);\n                    old.data[0].players[1].players = old.data[0].players[1].players.filter(e => e.name !== eaid);\n                    return old;\n                })\n                // Return a context object with the snapshotted value\n                return { previousGroup, sid }\n            },\n            // If the mutation fails, use the context returned from onMutate to roll back\n            onError: (err, newTodo, context) => {\n                queryClient.setQueryData('serverGame' + context.sid, context.previousGroup)\n            },\n            // Always refetch after error or success:\n            onSettled: (data, error, variables, context) => {\n                //queryClient.invalidateQueries('groupId' + context.gid)\n            },\n        }\n    );\n\n    const history = useHistory();\n\n    return (\n        <Row>\n            <Column>\n                <Header>\n                    <h2>Kick player</h2>\n                </Header>\n                <Card>\n                    <h2>You are going to kick player {props.eaid}</h2>\n                    <TextInput name=\"Reason\" callback={(e) => setReason(e.target.value)} />\n                    <ButtonRow>\n                        <ButtonLink name=\"Chancel\" to={`/server/${props.sid}/`} />\n                        <Button name=\"Kick him!\" disabled={reason === \"\"} callback={() => { KickPlayer.mutate({ sid, eaid, reason, playername: props.eaid }); history.push(`/server/${props.sid}/`); }} />\n                    </ButtonRow>\n                </Card>\n            </Column>\n        </Row>\n    );\n}\n\nfunction ServerBanPlayer(props) {\n\n    var { sid, eaid } = props;\n\n    var [reason, setReason] = useState(\"\");\n    var [banTime, setBanTime] = useState(0);\n    const queryClient = useQueryClient();\n\n    const BanPlayer = useMutation(\n        v => OperationsApi.banPlayer(v),\n        {\n            // When mutate is called:\n            onMutate: async ({ sid, eaid }) => {\n                // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n                await queryClient.cancelQueries('serverGame' + sid)\n                // Snapshot the previous value\n                const previousGroup = queryClient.getQueryData('serverGame' + sid)\n                // Optimistically update to the new value\n                queryClient.setQueryData('serverGame' + sid, old => {\n                    old.data[0].players[0].players = old.data[0].players[0].players.filter(e => e.name !== eaid);\n                    old.data[0].players[1].players = old.data[0].players[1].players.filter(e => e.name !== eaid);\n                    return old;\n                })\n                // Return a context object with the snapshotted value\n                return { previousGroup, sid }\n            },\n            // If the mutation fails, use the context returned from onMutate to roll back\n            onError: (err, newTodo, context) => {\n                queryClient.setQueryData('serverGame' + context.sid, context.previousGroup)\n            },\n            // Always refetch after error or success:\n            onSettled: (data, error, variables, context) => {\n                //queryClient.invalidateQueries('groupId' + context.gid)\n            },\n        }\n    );\n\n    const history = useHistory();\n\n    return (\n        <Row>\n            <Column>\n                <Header>\n                    <h2>Ban player</h2>\n                </Header>\n                <Card>\n                    <h2>You are going to ban player {props.eaid}</h2>\n                    <TextInput name=\"Reason\" callback={(e) => setReason(e.target.value)} />\n                    <TextInput type=\"number\" name=\"Ban time\" defaultValue={0} callback={(e) => setBanTime(e.target.value)} />\n                    <ButtonRow>\n                        <ButtonLink name=\"Chancel\" to={`/server/${props.sid}/`} />\n                        <Button name=\"Ban hammer!\" disabled={reason === \"\" || banTime < 0} callback={() => { BanPlayer.mutate({ sid, eaid, reason, name: props.eaid, time: banTime }); history.push(`/server/${props.sid}/`); }} />\n                    </ButtonRow>\n                </Card>\n            </Column>\n        </Row>\n    );\n}\n\nexport function ServerAction(props) {\n\n    var { eaid, action, sid } = props.match.params;\n\n    if (action === \"kick\") {\n        return <ServerKickPlayer eaid={eaid} sid={sid} />;\n    } else if (action === \"ban\") {\n        return <ServerBanPlayer eaid={eaid} sid={sid} />;\n    }\n\n    return (\n        <Row>\n            <Column>\n                <Header>\n                    <h2>Uh? Method {action} is not allowed..</h2>\n                </Header>\n            </Column>\n        </Row>\n    );\n\n}","import React, { useState } from \"react\";\nimport { useQuery, useQueryClient, useMutation } from 'react-query';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { OperationsApi } from \"../api\";\nimport { Column, Card, Header, ButtonLink, ButtonRow, Button, UserStRow, Row, ServerRow, Grow, TextInput, SmallButton } from \"../components\";\n\n\n\n\nexport function Group(props) {\n\n    var gid = props.match.params.gid;\n\n    const queryClient = useQueryClient();\n\n    const { error: groupError, data: groups } = useQuery('groupId' + gid, () => OperationsApi.getGroup(gid), { staleTime: 30000 });\n    const { error: userError, data: user } = useQuery('user', () => OperationsApi.user);\n\n    const deleteIcon = (\n        <svg viewBox=\"0 0 24 24\" style={{ width: '16px' }}>\n            <path fill=\"currentColor\" d=\"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z\" />\n        </svg>\n    );\n\n    const removeAdmin = useMutation(\n        variables => OperationsApi.removeGroupAdmin(variables),\n        {\n            // When mutate is called:\n            onMutate: async ({ gid, uid }) => {\n                // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n                await queryClient.cancelQueries('groupId' + gid)\n                // Snapshot the previous value\n                const previousGroup = queryClient.getQueryData('groupId' + gid)\n                // Optimistically update to the new value\n                const UTCNow = new Date(Date.now()).toUTCString();\n\n                queryClient.setQueryData('groupId' + gid, old => {\n                    old.data[0].admins = old.data[0].admins.filter(admin => admin.id !== uid);\n                    return old;\n                })\n                // Return a context object with the snapshotted value\n                return { previousGroup, gid }\n            },\n            // If the mutation fails, use the context returned from onMutate to roll back\n            onError: (err, newTodo, context) => {\n                queryClient.setQueryData('groupId' + context.gid, context.previousGroup)\n            },\n            // Always refetch after error or success:\n            onSettled: (data, error, variables, context) => {\n                queryClient.invalidateQueries('groupId' + context.gid)\n            },\n        }\n    );\n\n    const removeServer = useMutation(\n        variables => OperationsApi.removeServer(variables),\n        {\n            // When mutate is called:\n            onMutate: async ({ gid, sid }) => {\n                // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n                await queryClient.cancelQueries('groupId' + gid)\n                // Snapshot the previous value\n                const previousGroup = queryClient.getQueryData('groupId' + gid)\n                // Optimistically update to the new value\n                queryClient.setQueryData('groupId' + gid, old => {\n                    old.data[0].servers = old.data[0].servers.filter(server => server.id !== sid);\n                    return old;\n                })\n                // Return a context object with the snapshotted value\n                return { previousGroup, gid }\n            },\n            // If the mutation fails, use the context returned from onMutate to roll back\n            onError: (err, newTodo, context) => {\n                queryClient.setQueryData('groupId' + context.gid, context.previousGroup)\n            },\n            // Always refetch after error or success:\n            onSettled: (data, error, variables, context) => {\n                queryClient.invalidateQueries('groupId' + context.gid)\n            },\n        }\n    );\n\n\n\n    const removeOwner = useMutation(\n        variables => OperationsApi.removeGroupOwner(variables),\n        {\n            // When mutate is called:\n            onMutate: async ({ gid, uid }) => {\n                // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n                await queryClient.cancelQueries('groupId' + gid)\n                // Snapshot the previous value\n                const previousGroup = queryClient.getQueryData('groupId' + gid)\n                // Optimistically update to the new value\n                const UTCNow = new Date(Date.now()).toUTCString();\n\n                queryClient.setQueryData('groupId' + gid, old => {\n                    old.data[0].owners = old.data[0].owners.filter(admin => admin.id !== uid);\n                    return old;\n                })\n                // Return a context object with the snapshotted value\n                return { previousGroup, gid }\n            },\n            // If the mutation fails, use the context returned from onMutate to roll back\n            onError: (err, newTodo, context) => {\n                queryClient.setQueryData('groupId' + context.gid, context.previousGroup)\n            },\n            // Always refetch after error or success:\n            onSettled: (data, error, variables, context) => {\n                queryClient.invalidateQueries('groupId' + context.gid)\n            },\n        }\n    );\n\n    if (groupError || userError) {\n        return <Redirect to=\"/\" />;\n    }\n\n    var groupCard = \"\", addOwner = \"\", ownerList = [], adminList = [], serverList = [];\n\n    if (groups) {\n        var group = groups.data[0];\n        if (group) {\n\n            for (var i in group.servers) {\n                var server = group.servers[i];\n                serverList.push(\n                    <ServerRow server={server} key={i} button={\n                        <SmallButton\n                            name=\"Delete\"\n                            content={deleteIcon}\n                            vars={{ gid, sid: server.id }}\n                            callback={removeServer.mutate}\n                        />\n                    } />\n                );\n\n\n            }\n\n            groupCard = (\n                <Card>\n                    <h2>{group.groupName}</h2>\n                    <p>\n                        <Row>\n                            <Grow>Discord ID:</Grow> {group.discordGroupId}<br />\n                        </Row>\n                        <Row>\n                            <Grow>Moderator role:</Grow> {group.discordModRoleId}<br />\n                        </Row>\n                        <Row>\n                            <Grow>Admin role:</Grow> { group.discordAdminRoleId }\n                        </Row>\n                    </p>\n                    <ButtonRow>\n                        <ButtonLink name=\"Edit\" to={\"/group/\" + gid + \"/edit/\"} />\n                        <ButtonLink name=\"Delete\" to={\"/group/\" + gid + \"/delete/\"} />\n                    </ButtonRow>\n                </Card>\n            );\n\n            for (var i in group.owners) {\n                var owner = group.owners[i];\n                ownerList.push(\n                    <UserStRow user={owner} key={i} button={\n                        <SmallButton\n                            name=\"Delete\"\n                            content={deleteIcon}\n                            vars={{ gid, uid: owner.id }}\n                            callback={removeOwner.mutate}\n                        />\n                    } />\n                );\n            }\n\n            for (var i in group.admins) {   \n                var admin = group.admins[i];\n                adminList.push(\n                    <UserStRow user={admin} key={i} button={\n                        <SmallButton\n                            name=\"Delete\"\n                            content={deleteIcon}\n                            vars={{ gid, uid: group.admins[i].id }}\n                            callback={removeAdmin.mutate} />\n                    } />\n                );\n            }\n            \n        } else {\n            groupCard = (\n                <Card>\n                    <h2>Group not found!</h2>\n                </Card>\n            );\n        }\n    }\n\n    if (user) {\n        if (user.auth.isDeveloper) {\n            addOwner = <ButtonRow><ButtonLink name=\"Add Owner\" to={\"/group/\" + gid + \"/add/owner\"} /></ButtonRow>;\n\t\t}\n\t}\n\n    return (\n        <>\n            <Row>\n                <Column>\n                    <Header>\n                        <h2>Group</h2>\n                    </Header>\n                </Column>\n            </Row>\n            <Row>\n                <Column>\n                    {groupCard}\n                </Column>\n            </Row>\n            <Row>\n                <Column>\n                    <Card>\n                        <h2>Owners</h2>\n                        {ownerList}\n                        {addOwner}\n                    </Card>\n                    <Card>\n                        <h2>Admins</h2>\n                        {adminList}\n                        <ButtonRow>\n                            <ButtonLink name=\"Add Admin\" to={\"/group/\" + gid + \"/add/admin\"} />\n                        </ButtonRow>\n                    </Card>\n                </Column>\n                <Column>\n                    <Card>\n                        <h2>Servers</h2>\n                        {serverList}\n                        <ButtonRow>\n                            <ButtonLink name=\"Add Server\" to={\"/group/\" + gid + \"/add/server\"} />\n                        </ButtonRow>\n                    </Card>\n                </Column>\n            </Row>\n        </>\n    );\n\n}\n\n\nexport function AddGroupOwner(props) {\n    var gid = props.match.params.gid;\n\n    var nickname = \"\", uid = \"\";\n\n    const queryClient = useQueryClient();\n\n\n    const AddGroupOwnerExecute = useMutation(\n        variables => OperationsApi.addGroupOwner(variables),\n        {\n            // When mutate is called:\n            onMutate: async ({ gid, uid, nickname }) => {\n\n                // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n                await queryClient.cancelQueries('groupId' + gid)\n                // Snapshot the previous value\n                const previousGroup = queryClient.getQueryData('groupId' + gid)\n                // Optimistically update to the new value\n                const UTCNow = new Date(Date.now()).toUTCString();\n                \n                queryClient.setQueryData('groupId' + gid, old => {\n                    old.data[0].owners.push({ id: uid, name: nickname, addedAt: UTCNow });\n                    old.data[0].admins.push({ id: uid, name: nickname, addedAt: UTCNow });\n                    return old;\n                })\n                // Return a context object with the snapshotted value\n                return { previousGroup, gid }\n            },\n            // If the mutation fails, use the context returned from onMutate to roll back\n            onError: (err, newTodo, context) => {\n                queryClient.setQueryData('groupId' + context.gid, context.previousGroup)\n            },\n            // Always refetch after error or success:\n            onSettled: (data, error, variables, context) => {\n                queryClient.invalidateQueries('groupId' + context.gid)\n            },\n        }\n    );\n\n    const history = useHistory();\n\n    return (\n        <Row>\n            <Column>\n                <Header>\n                    <h2>Add new Owner</h2>\n                </Header>\n                <Card>\n                    <h2>Group Owner</h2>\n                    <TextInput name=\"Nickname (any, will be auto-updated)\" callback={(e)=>{nickname=e.target.value}}/>\n                    <TextInput name=\"Discord UID\" callback={(e) => { uid = e.target.value; }}/>\n                    <ButtonRow>\n                        <Button name=\"Add Owner\" callback={() => { AddGroupOwnerExecute.mutate({ gid, uid, nickname }); history.push(\"/group/\" + gid);  }} />\n                    </ButtonRow>\n                </Card>\n            </Column>\n        </Row>\n    );\n\n}\n\nexport function AddGroupAdmin(props) {\n    var gid = props.match.params.gid;\n\n    const [addAdminState, changeState] = useState({ uid: \"\", nickname: \"\", canAdd: false });\n\n    var nickname = \"\", uid = \"\";\n\n    const queryClient = useQueryClient();\n\n\n    const AddGroupAdminExecute = useMutation(\n        variables => OperationsApi.addGroupAdmin(variables),\n        {\n            // When mutate is called:\n            onMutate: async ({ gid, uid, nickname }) => {\n\n                // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n                await queryClient.cancelQueries('groupId' + gid)\n                // Snapshot the previous value\n                const previousGroup = queryClient.getQueryData('groupId' + gid)\n                // Optimistically update to the new value\n                const UTCNow = new Date(Date.now()).toUTCString();\n\n                queryClient.setQueryData('groupId' + gid, old => {\n                    old.data[0].admins.push({ id: uid, name: nickname, addedAt: UTCNow });\n                    return old;\n                })\n                // Return a context object with the snapshotted value\n                return { previousGroup, gid }\n            },\n            // If the mutation fails, use the context returned from onMutate to roll back\n            onError: (err, newTodo, context) => {\n                queryClient.setQueryData('groupId' + context.gid, context.previousGroup)\n            },\n            // Always refetch after error or success:\n            onSettled: (data, error, variables, context) => {\n                queryClient.invalidateQueries('groupId' + context.gid)\n            },\n        }\n    );\n\n    const updateState = (values) => {\n        var newState = {\n            ...addAdminState,\n            ...values\n        };\n        newState.canAdd = newState.uid !== \"\";\n        changeState(newState);\n    }\n\n    const history = useHistory();\n\n    return (\n        <Row>\n            <Column>\n                <Header>\n                    <h2>Add new Admin</h2>\n                </Header>\n                <Card>\n                    <h2>Group Admin</h2>\n                    <TextInput name=\"Nickname (any, will be auto-updated)\" callback={(e) => updateState({nickname: e.target.value}) } />\n                    <TextInput name=\"Discord UID\" callback={(e) => updateState({uid: e.target.value}) } />\n                    <ButtonRow>\n                        <Button name=\"Add Admin\" disabled={!addAdminState.canAdd} callback={() => { AddGroupAdminExecute.mutate({ gid, uid: addAdminState.uid, nickname: addAdminState.nickname }); history.push(\"/group/\" + gid); }} />\n                    </ButtonRow>\n                </Card>\n            </Column>\n        </Row>\n    );\n\n}\n\n\nexport function AddGroup(props) {\n\n    var groupName = \"\", discordId = \"\", staffRole = \"\";\n\n    const [addGroupState, changeState] = useState({\n        variables: {\n            groupName: \"\",\n            discordId: \"\",\n            adminRole: \"\",\n            modRole: \"\"\n        },\n        roleDisplay: false,\n        canAdd: false\n    });\n\n    const queryClient = useQueryClient();\n    const history = useHistory();\n\n    const AddNewGroupExecute = useMutation(\n        variables => OperationsApi.addGroup(variables),\n        {\n            onMutate: async (variables) => {\n                await queryClient.cancelQueries('devGroups');\n                return {}\n            },\n            onSettled: (data, error, variables, context) => {\n                queryClient.refetchQueries('devGroups');\n            },\n        }\n    );\n\n    const checkInputVariables = (newVariables) => {\n        var newGroupState = {\n            ...addGroupState,\n            variables: {\n                ...addGroupState.variables,\n                ...newVariables\n            }\n        };\n        let newVars = newGroupState.variables;\n        newGroupState.roleDisplay = (newVars.discordId !== \"\");\n        newGroupState.canAdd =\n            (newVars.groupName !== \"\") && (newVars.remid !== \"\") && (newVars.sid !== \"\");\n        changeState(newGroupState);\n    };\n\n    return (\n        <Row>\n            <Column>\n                <Header>\n                    <h2>Create new Group</h2>\n                </Header>\n                <Card>\n                    <h2>Group info</h2>\n                    <TextInput name=\"Name\" callback={(e) => { checkInputVariables({ groupName: e.target.value }) }} />\n                    <TextInput name=\"Discord Server ID\" callback={(e) => { checkInputVariables({ discordId: e.target.value }) }} />\n                    <TextInput name=\"Mod role ID\" disabled={!addGroupState.roleDisplay} callback={(e) => { checkInputVariables({ modRole: e.target.value }) }} />\n                    <TextInput name=\"Admin role ID\" disabled={!addGroupState.roleDisplay} callback={(e) => { checkInputVariables({ adminRole: e.target.value }) }} />\n                    <TextInput name=\"SID cookie\" type=\"password\" callback={(e) => { checkInputVariables({ sid: e.target.value }) }} />\n                    <TextInput name=\"REMID cookie\" type=\"password\" callback={(e) => { checkInputVariables({ remid: e.target.value }) }} />\n                    <ButtonRow>\n                        <Button name=\"Create group\" disabled={!addGroupState.canAdd} callback={() => { AddNewGroupExecute.mutate(addGroupState.variables); history.push(\"/dev/\"); }} />\n                    </ButtonRow>\n                </Card>\n            </Column>\n        </Row>\n    );\n}\n\nexport function DeleteGroup(props) {\n\n    var thisGid = props.match.params.gid;\n\n    const queryClient = useQueryClient();\n    const history = useHistory();\n\n    const DeleteGroupExecute = useMutation(\n        variables => OperationsApi.removeGroup(variables),\n        {\n            // When mutate is called:\n            onMutate: async ({ gid }) => {\n                // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n                await queryClient.cancelQueries('devGroups')\n                // Snapshot the previous value\n                const previousGroups = queryClient.getQueryData('devGroups')\n                // Optimistically update to the new value\n                queryClient.setQueryData('devGroups', old => {\n                    if (old) {\n                        old.data = old.data.filter(group => group.id !== gid);\n                    }\n                    return old;\n                })\n                // Return a context object with the snapshotted value\n                return { previousGroups, gid }\n            },\n            // If the mutation fails, use the context returned from onMutate to roll back\n            onError: (err, newTodo, context) => {\n                queryClient.setQueryData('devGroups', context.previousGroups)\n            },\n            // Always refetch after error or success:\n            onSettled: (data, error, variables, context) => {\n                queryClient.invalidateQueries('devGroups')\n            },\n        }\n    );\n\n    return (\n        <Row>\n            <Column>\n                <Header>\n                    <h2>Delete Group</h2>\n                </Header>\n                <Card>\n                    <h2>Danger zone</h2>\n                    <p>Are you sure you want to delete this group?</p>\n                    <ButtonRow>\n                        <ButtonLink name=\"Oh, no!\" to={\"/group/\" + thisGid} />\n                        <Button name=\"Yes, delete\" callback={() => { DeleteGroupExecute.mutate({ gid: thisGid }); history.push(\"/dev/\"); }} />\n                    </ButtonRow>\n                </Card>\n            </Column>\n        </Row>\n    );\n}\n\nexport function AddGroupServer(props) {\n    var gid = props.match.params.gid;\n\n    var name = \"\", alias = \"\";\n\n    const queryClient = useQueryClient();\n\n\n    const AddGroupServerExecute = useMutation(\n        variables => OperationsApi.addGroupServer(variables),\n        {\n            // When mutate is called:\n            onMutate: async({ gid, name, alias }) => {\n\n                // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n                await queryClient.cancelQueries('groupId' + gid)\n                // Snapshot the previous value\n                const previousGroup = queryClient.getQueryData('groupId' + gid)\n                // Optimistically update to the new value\n                const UTCNow = new Date(Date.now()).toUTCString();\n\n                queryClient.setQueryData('groupId' + gid, old => {\n                    old.data[0].servers.push({\n                        \"addedAt\": UTCNow,\n                        \"id\": null,\n                        \"name\": name\n                    });\n                    return old;\n                })\n                // Return a context object with the snapshotted value\n                return { previousGroup, gid }\n            },\n            // If the mutation fails, use the context returned from onMutate to roll back\n            onError: (err, newTodo, context) => {\n                queryClient.setQueryData('groupId' + context.gid, context.previousGroup)\n            },\n            // Always refetch after error or success:\n            onSettled: (data, error, variables, context) => {\n                queryClient.invalidateQueries('groupId' + context.gid)\n            },\n        }\n    );\n\n    const history = useHistory();\n\n    return (\n        <Row>\n            <Column>\n                <Header>\n                    <h2>Add new Server</h2>\n                </Header>\n                <Card>\n                    <h2>Group Server</h2>\n                    <TextInput name=\"Server name\" callback={(e) => { name = e.target.value }} />\n                    <TextInput name=\"Alias (optional)\" callback={(e) => { alias = e.target.value; }} />\n                    <ButtonRow>\n                        <Button name=\"Add Server\" callback={() => { AddGroupServerExecute.mutate({ gid, alias, name }); history.push(\"/group/\" + gid); }} />\n                    </ButtonRow>\n                </Card>\n            </Column>\n        </Row>\n    );\n\n}\n\n\nexport function EditGroup(props) {\n    return (<></>);\n}","import React from \"react\";\nimport { Route, Switch } from 'react-router-dom';\n\nimport Home from \"./Home\";\nimport Account from \"./Account\";\nimport { Developer } from \"./Developer\";\nimport { Server, ServerAction } from \"./Server\";\nimport { Group, AddGroupOwner, EditGroup, AddGroupAdmin, AddGroup, DeleteGroup, AddGroupServer } from \"./Group\";\n\n\n\nexport default function Views(props) {\n    return (\n        <Switch location={props.location}>\n\n            <Route exact path=\"/\" component={Home} />\n\n            <Route exact path=\"/account/\" component={Account} />\n\n            <Route exact path=\"/server/:sid/\" component={Server} />\n            {/* exact path=\"/server/:sid/manage/\" />*/}\n            <Route exact path=\"/server/:sid/:action/:eaid/\" component={ServerAction} />\n\n            <Route exact path=\"/group/new/\" component={AddGroup} />\n            <Route exact path=\"/group/:gid/\" component={Group} />\n\n            <Route exact path=\"/group/:gid/add/server\" component={AddGroupServer} />\n            <Route exact path=\"/group/:gid/add/admin/\" component={AddGroupAdmin} />\n            <Route exact path=\"/group/:gid/add/owner/\" component={AddGroupOwner} />\n\n            <Route exact path=\"/group/:gid/edit/\" component={EditGroup} />\n            <Route exact path=\"/group/:gid/logs/\" />\n            <Route exact path=\"/group/:gid/delete\" component={DeleteGroup} />\n\n            <Route exact path=\"/dev/\" component={Developer} />\n\n        </Switch>\n    );\n}","\nimport React from \"react\";\nimport { useLocation } from 'react-router-dom';\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport './App.css';\nimport './fade.css';\n\nimport Views from \"./views\";\n\nimport { Sidebar, PageContainer, PageColumn } from \"./components\";\n\n\nfunction ViewportHolder(props) {\n    return (\n        <div className=\"App\">{props.children}</div>\n    );\n}\n\nfunction App() {\n\n    let location = useLocation();\n\n    return (\n        <div className=\"App\">\n            <Sidebar />\n            <TransitionGroup component={PageContainer}>\n                <CSSTransition key={location.key} classNames=\"fade\" timeout={200}>\n                    <PageColumn>\n                        <Views location={location} />\n                    </PageColumn>\n                </CSSTransition>\n            </TransitionGroup>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport { QueryClient, QueryClientProvider } from 'react-query'\n\nimport App from './App';\n\n\nconst queryClient = new QueryClient();\n\n// Browser rendering\n\nReactDOM.render(\n\n    <React.StrictMode> \n        <QueryClientProvider client={queryClient}>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </QueryClientProvider>\n    </React.StrictMode>,\n\n    document.getElementById('root')\n\n);\n\n"],"sourceRoot":""}